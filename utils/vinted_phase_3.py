import os
import time
import pandas as pd
import requests
import subprocess
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from tqdm import tqdm
import random

DEBUG_PORT = 9222
VINTED_URL = "https://www.vinted.fr/items/new"


def is_debug_active(port=DEBUG_PORT):
    try:
        r = requests.get(f"http://localhost:{port}/json")
        return r.status_code == 200
    except Exception:
        return False


def connect_to_chrome():
    print(f"üîç Connexion √† Chrome sur le port {DEBUG_PORT} ...")
    options = Options()
    options.debugger_address = f"127.0.0.1:{DEBUG_PORT}"
    driver = webdriver.Chrome(options=options)
    print("‚úÖ Connect√© √† Chrome.")
    random_sleep(1, 1.25)
    return driver


def random_sleep(min_s=0.5, max_s=2.0):
    duration = random.uniform(min_s, max_s)
    time.sleep(duration)


def fill_form(driver, row):
    print("‚û°Ô∏è Remplissage du formulaire...")

    # === IMAGES ===
    try:
        file_input = driver.find_element(By.CSS_SELECTOR, 'input[type="file"]')
        paths = "\n".join([
            os.path.abspath(row["Picture_1"]),
            os.path.abspath(row["Picture_2"])
        ])
        file_input.send_keys(paths)
        print("üñºÔ∏è Images upload√©es.")
        random_sleep(1, 1.25)
    except Exception as e:
        print("‚ùå Erreur upload images :", e)

    # === TITRE ===
    try:
        title_input = driver.find_element(By.NAME, "title")
        title_input.clear()
        title_input.send_keys(row["Title"])
        print("üè∑Ô∏è Titre rempli.")
        random_sleep(1, 1.25)
    except Exception:
        print("‚ùå Champ 'Titre' introuvable.")

    # === DESCRIPTION ===
    try:
        desc = row["Description"]
        desc_area = driver.find_element(
            By.CSS_SELECTOR, 'textarea[data-testid="description--input"]')
        driver.execute_script("arguments[0].scrollIntoView(true);", desc_area)
        random_sleep(1, 1.25)
        desc_area.click()
        desc_area.clear()
        for char in desc:
            desc_area.send_keys(char)

        print("üìù Description remplie.")
        random_sleep(2, 2.25)
    except Exception as e:
        print(f"‚ùå Erreur Description :", e)

    # === CAT√âGORIE ===
    try:
        print("üîΩ S√©lection cat√©gorie...")
        cat_input = driver.find_element(By.ID, "catalog_id")
        cat_input.click()
        random_sleep(0.5, 0.75)
        driver.find_element(By.ID, "catalog-2309").click()
        random_sleep(0.5, 0.75)
        driver.find_element(By.ID, "catalog-3224").click()
        random_sleep(0.5, 0.75)
        driver.find_element(By.ID, "catalog-3233").click()
        print("‚úÖ Cat√©gorie s√©lectionn√©e.")
        random_sleep(2, 2.25)
    except Exception as e:
        print("‚ùå S√©lection cat√©gorie √©chou√©e :", e)

    # === MARQUE ===
    try:
        print("üîΩ S√©lection marque...")
        brand_input = driver.find_element(By.ID, "brand_id")
        brand_input.click()
        random_sleep(1, 1.25)
        driver.find_element(By.ID, "brand-191646").click()
        print("‚úÖ Marque s√©lectionn√©e.")
        random_sleep(1, 1.25)
    except Exception as e:
        print("‚ùå S√©lection marque √©chou√©e :", e)

    # === √âTAT ===
    try:
        print("üîΩ S√©lection √©tat...")
        condition_input = driver.find_element(By.ID, "status_id")
        condition_input.click()
        random_sleep(1, 1.25)
        driver.find_element(By.ID, "condition-2").click()
        print("‚úÖ √âtat s√©lectionn√©.")
        random_sleep(1, 1.25)
    except Exception as e:
        print("‚ùå S√©lection √©tat √©chou√©e :", e)

    # === PRIX ===
    try:
        price_input = driver.find_element(By.NAME, "price")
        price_input.clear()
        price_input.send_keys(str(row["Price"]))
        print("üí∞ Prix renseign√©.")
        random_sleep(1, 1.25)
    except Exception:
        print("‚ùå Champ 'Prix' introuvable.")

    # === COLIS ===
    try:
        driver.find_element(By.ID, "package-size-1").click()
        print("üì¶ Colis s√©lectionn√©.")
        random_sleep(1, 1.25)
    except Exception as e:
        print("‚ùå S√©lection colis √©chou√©e :", e)

    print(f"‚úÖ Fiche {row['Title']} remplie.")
    random_sleep(2, 2.25)


def run_scraping(csv_path):
    if not is_debug_active():
        print("üü° Chrome n'est pas lanc√© avec --remote-debugging-port=9222")
        print("üöÄ Lancement automatique de Chrome via launch_chrome_debug.bat")
        subprocess.run(["start", "chrome_launcher.bat"], shell=True)
        input("Appuyez sur l'onglet fra√Æchement ouvert pour link le script ...")

    if not os.path.exists(csv_path):
        print(f"‚ùå Fichier introuvable : {csv_path}")
        return

    df = pd.read_csv(csv_path)
    if df.empty:
        print("‚ùå Le fichier CSV est vide.")
        return

    driver = connect_to_chrome()

    print(f"üîÑ D√©marrage du traitement de {len(df)} fiches...\n")
    for index, row in tqdm(df.iterrows(), total=len(df), desc="Fiches remplies"):
        print(f"\nüßæ Fiche {index+1} / {len(df)} : {row['Title']}")
        try:
            driver.execute_script(f"window.open('{VINTED_URL}');")
            driver.switch_to.window(driver.window_handles[-1])
        except Exception as e:
            print(f"‚ùå Erreur lors de la connexion √† Chrome : {e}")
            return
        print(f"üîç Ouverture de la page item : {row['Title']}")
        random_sleep(2, 2.25)
        fill_form(driver, row)
        input("üîÑ Apuuyez sur Entr√©e pour lancer la prochaine fiche")

    print("\nüéâ Toutes les fiches ont √©t√© trait√©es.")
